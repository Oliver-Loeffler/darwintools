\name{resolveClusterSORT}
\alias{resolveClusterSORT}
\title{Identify defect pairs within cluster using SORT algorithm}
\description{fucntion \bold{resolveClusterSORT} estimates defect pairs within one cluster using SORT algorithm.Input data need to be generated by \bold{getClusters()} or by function with similar input. Out ptu data is matrix with columns \bold{data1} and \bold{data2} containing integer numbers idetifying index of coresponding defects in corespondings data sets used as input to \bold{getClusters()} function.
 }
\usage{
 resolveClusterSORT(CL)
}
\arguments{
	\item{CL}{defect cluster matrix)}
}
\details{
 Function is identifying coresponding defect pairs out of the input defect cluster. Defect asignement may not necessarily be perfect as the defect pairs are identified by simple selection of lowest defect distance in the matrix provided starting in the leftmost column in case of matrix with column number > row number and from topmost row in case column number < row number. 
This function is used by \bold{pairedDFX()} when alg="SORT". The result may be less optimal than that obtained by algorith "TSP", but is more robust and able to analyze bigger data sets without computation crash caused by consumption of available memory.
\bold{CL} matrix may contain difference between defect sizes instead of distances, then the function is looking for defect with similar defect size.
}
\value{  
	matrix with indexes of matching defects in data1 and data2. \\
	First column coresponds to data1 defects, second column to data2 defects. Number represents rowe index of the defect not the defect Id as e.g. in case of DFX data, since the defect number starts with 0, but the index with 1. It means that e.g.
      index 5 corresponds to defect number 4.
}
\author{Pavel Nesladek}
\seealso{paired DFX, getClusters, pairCriteriaTable}
\examples{

## Do not run

# data  <- readDFX("DFX_scan.txt", Dread=0)
# data2  <- readDFX("DFX_scan2.txt", Dread=0)

## estimate distane matrix for scans data and data2
# criteria <- pairCriteriaTable(data, data2, dis=150, crit="distance")

## identify clusters
# Clusters <- getClusters(criteria)

## and analyse defect pairs in first cluster
# pairs resolveClusterSORT(Clusters[[1]])



}
\keyword{misc}
